4、answer



#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

def quick_sort(arr, low, high):
    if low < high:
        # 1) Partition the array and get the pivot element index
        pivot_index = partition(arr, low, high)

        # 2) Recursively apply quicksort to the left and right sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

def partition(arr, low, high):
    pivot = arr[high]                        # Choose the last element as the pivot
    i = low - 1                              # Index of the smaller element

    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]

    # Place the pivot element in its correct position
    arr[i + 1], arr[high] = arr[high], arr[i + 1]

    return i + 1  							# Return the index of the pivot element


# Example Test：
arr = [3, 6, 8, 10, 1, 2, 5, 7, 9, 4]
quick_sort(arr, 0, len(arr) - 1)
print("Sorted array:", arr)


# 【Comment】：
In this Python code, the quick_sort function implements the quick sort algorithm. 
It selects a pivot element, partitions the array such that all elements less than the pivot are on the left side, 
and greater elements are on the right side. The function then recursively applies quick sort to the resulting sub-arrays. 
The partition function rearranges the elements based on the pivot and returns the index of the pivot element. 
This process continues until the entire array is sorted.