
2、 merge sort algorithm that works over an array：


#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

def merge_sort(arr):
    if len(arr) > 1:
        # 1) Divide the array into two halves
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        # 2) Recursively sort the two halves
        merge_sort(left_half)
        merge_sort(right_half)

        # 3) Merge the sorted halves
        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # 4) Append remaining elements from left and right halves
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

# Example usage
arr = [3, 6, 8, 10, 1, 2, 5, 7, 9, 4]
merge_sort(arr)
print("Sorted array:", arr)


[Comment]:
In this Python code, the merge_sort function implements the merge sort algorithm. 
It recursively divides the array into smaller halves until each sub-array contains only one element.
Then, it merges these sub-arrays back together in sorted order. 
The merging process is done using the merge step, where the elements are compared and placed in the correct order. 
Finally, the sorted array is returned.